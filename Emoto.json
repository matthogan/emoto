{
    "files": [
        {
            "id": "f8854d9e-fe56-4356-b0c0-9e2e14112faa",
            "name": "Code",
            "type": "server_js",
            "source": "/**\n * Copyright Codejago\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Globals\nvar AnalysisType;\nvar ServiceLocator;\nvar Aylien;\nvar Style;\n(function() {\n  AnalysisType \u003d new AnalysisTypeService();\n  Style \u003d new StyleService();\n  Aylien \u003d new AylienService();\n  ServiceLocator \u003d new ServiceLocatorService();\n  ServiceLocator.bind(AnalysisType.SUMMARY, new SummaryService());\n  ServiceLocator.bind(AnalysisType.ENTITY, new EntityService());\n  ServiceLocator.bind(AnalysisType.SENTIMENT, new SentimentService());\n  ServiceLocator.bind(AnalysisType.ENTITY_SENTIMENT, new EntitySentimentService());\n  ServiceLocator.bind(AnalysisType.HASHTAGS, new HashtagsService());\n  ServiceLocator.bind(AnalysisType.LANG_DETECT, new LanguageDetectionService());\n  ServiceLocator.bind(AnalysisType.CLASS, new ClassificationService());\n})();\n\n/**\n * Returns the array of cards that should be rendered for the current\n * e-mail thread. The name of this function is specified in the\n * manifest \u0027onTriggerFunction\u0027 field, indicating that this function\n * runs every time the add-on is started.\n *\n * @param {Object} e The data provided by the Gmail UI.\n * @return {Card[]}\n */\nfunction buildAddOn(e) { \n  var message \u003d getCurrentMessage(e);\n  return createForms(e, message);\n}\n\nfunction createForms(e, message) {\n  return [createRootCard(message),\n    createSentimentCard(message, getResult(e, AnalysisType.SENTIMENT)),\n    createSummaryCard(message, getResult(e, AnalysisType.SUMMARY)),\n    createEntityCard(message, getResult(e, AnalysisType.ENTITY)),\n    createHashtagsCard(message, getResult(e, AnalysisType.HASHTAGS)),\n    createLanguageDetectionCard(message, getResult(e, AnalysisType.LANG_DETECT)),\n    createClassificationCard(message, getResult(e, AnalysisType.CLASS)),\n    createEntitySentimentCard(message, getResult(e, AnalysisType.ENTITY_SENTIMENT))];\n}\n\nfunction createRootCard(message) {\n  return createCard(message, null, null, null);\n}\n\n// Classification\n\nfunction createEntitySentimentCard(message, result) {\n  var body \u003d createEntitySentimentWidget(message, result);\n  return createCard(message, result, AnalysisType.ENTITY_SENTIMENT, body);\n}\n\nfunction createEntitySentimentWidget(message, result) {\n  return View.createBodyWidget(message, result, AnalysisType.ENTITY_SENTIMENT);\n}\n\nfunction analyseEntitySentiment(e) {\n  return analyse(e, AnalysisType.ENTITY_SENTIMENT);\n}\n\n// Classification\n\nfunction createClassificationCard(message, result) {\n  var body \u003d createClassificationWidget(message, result);\n  return createCard(message, result, AnalysisType.CLASS, body);\n}\n\nfunction createClassificationWidget(message, result) {\n  return View.createBodyWidget(message, result, AnalysisType.CLASS);\n}\n\nfunction analyseClassification(e) {\n  return analyse(e, AnalysisType.CLASS);\n}\n\n// Language Detection\n\nfunction createLanguageDetectionCard(message, result) {\n  var body \u003d createLanguageDetectionWidget(message, result);\n  return createCard(message, result, AnalysisType.LANG_DETECT, body);\n}\n\nfunction createLanguageDetectionWidget(message, result) {\n  return View.createBodyWidget(message, result, AnalysisType.LANG_DETECT);\n}\n\nfunction analyseLanguageDetection(e) {\n  return analyse(e, AnalysisType.LANG_DETECT);\n}\n\n// Entity\n\nfunction createEntityCard(message, result) {\n  var body \u003d createEntityWidget(message, result);\n  return createCard(message, result, AnalysisType.ENTITY, body);\n}\n\nfunction createEntityWidget(message, result) {\n  return View.createBodyWidget(message, result, AnalysisType.ENTITY);\n}\n\nfunction analyseEntity(e) {\n  return analyse(e, AnalysisType.ENTITY);\n}\n\n// Summary\n\nfunction createSummaryCard(message, result) {\n  var body \u003d createSummaryWidget(message, result);\n  return createCard(message, result, AnalysisType.SUMMARY, body);\n}\n\nfunction createSummaryWidget(message, result) {\n  return View.createBodyWidget(message, result, AnalysisType.SUMMARY);\n}\n\nfunction analyseSummary(e) {\n  return analyse(e, AnalysisType.SUMMARY);\n}\n\n// Hashtags\n\nfunction createHashtagsCard(message, result) {\n  var body \u003d createHashtagsWidget(message, result);\n  return createCard(message, result, AnalysisType.HASHTAGS, body);\n}\n\nfunction createHashtagsWidget(message, result) {\n  return View.createBodyWidget(message, result, AnalysisType.HASHTAGS);\n}\n\nfunction analyseHashtags(e) {\n  return analyse(e, AnalysisType.HASHTAGS);\n}\n\n// Sentiment\n\nfunction createSentimentCard(message, result) {\n  var body \u003d createSentimentWidget(message, result);\n  return createCard(message, result, AnalysisType.SENTIMENT, body);\n}\n\nfunction createSentimentWidget(message, sentiment) {\n  //return View.createBodyWidget(message, sentiment, AnalysisType.SENTIMENT);\n  //debug_log(sentiment);\n  var action \u003d CardService.newAction()\n    .setFunctionName(Config[AnalysisType.SENTIMENT].CALLBACK);\n  var button \u003d CardService.newTextButton()\n    .setText(messages(\u0027action\u0027))\n    .setOnClickAction(action);\n  var section \u003d CardService.newCardSection()\n    .setHeader(\"\u003cfont color\u003d\\\"#1257e0\\\"\u003e\u003cb\u003e\" + messages(\u0027results\u0027) + \"\u003c/b\u003e\u003c/font\u003e\");\n  section.addWidget(View.createText(safe_access(sentiment, \u0027polarity\u0027), \n                               messages(\u0027label.sentiment.polarity\u0027)));\n  section.addWidget(View.createText(safe_access(sentiment, \u0027polarity_confidence\u0027), \n                               messages(\u0027label.sentiment.confidence\u0027)));\n  section.addWidget(View.createText(safe_access(sentiment, \u0027subjectivity\u0027), \n                               messages(\u0027label.sentiment.subjectivity\u0027)));\n  section.addWidget(View.createText(safe_access(sentiment, \u0027subjectivity_confidence\u0027), \n                               messages(\u0027label.sentiment.confidence\u0027)));\n  section.addWidget(button);\n  return section;\n}\n\nfunction analyseSentiment(e) {\n  return analyse(e, AnalysisType.SENTIMENT);\n}\n\n// General\n\n/**\n * Analyse the current message body if not already done.\n *\n * @param {Object} e The data provided by the Gmail UI.\n */\nfunction analyse(e, analysisType) {\n  // refresh view\n  var navigation \u003d CardService.newNavigation()\n    .popToNamedCard(analysisType);\n  // current message\n  var message \u003d getCurrentMessage(e);\n  // send for analysis\n  var result \u003d ServiceLocator.analyse(analysisType, \n                                      extractText(message), \n                                      extractTitle(message));\n  // last attempt\n  updateLastUpdated(message, analysisType);\n  // store result against message\n  if (applyResult(message, result, analysisType)) {\n    applyLabel(message, analysisType);\n    var card \u003d View.CreateCardCallbacks[analysisType](message, result);\n    navigation.updateCard(card);\n  }\n  return CardService.newActionResponseBuilder()\n    .setNavigation(navigation)\n    .build();\n}\n\nfunction createCard(message, result, analysisType, body) {\n  // Create a section for that contains all user Labels.\n  var header \u003d createSubHeaderWidget(getMessage(analysisType, \u0027subtitle\u0027), \n                                  getMessage(analysisType, \u0027subtext\u0027));\n  // Build the main card after adding the section.\n  var card \u003d CardService.newCardBuilder()\n    .setName(!analysisType ? \u0027root\u0027 : analysisType)\n    .setHeader(CardService.newCardHeader()\n               .setTitle(getMessage(analysisType, \u0027title\u0027))\n               .setImageUrl(Assets.getIcon(analysisType)))\n    .addSection(header);\n  if (!!body \u0026\u0026 Array.isArray(body)) {\n    for (var key in body) {\n      if (!!body[key]) {\n        card.addSection(body[key]);\n      }\n    }\n  } else if (!!body) {\n    card.addSection(body);\n  }\n  if (!!result) {\n    var footer \u003d createFooterWidget(message, analysisType, result);\n    card.addSection(footer);\n  }\n  return card.build();\n}\n\nfunction applyResult(message, result, analysisType) {\n  var text \u003d JSON.stringify(!result ? {} : result);\n  return setProperty(message, analysisType, text);\n}\n\nfunction createSubHeaderWidget(title, subtext) {\n  var header \u003d CardService.newCardSection()\n    .setHeader(Style.sectionHeader(title));\n  header.addWidget(View.createText(subtext));\n  return header;\n}\n\nfunction createFooterWidget(message, analysisType, results) { \n  var lastUpdated \u003d getLastUpdated(message, analysisType);\n  var statusText \u003d messages(\u0027status\u0027) + \": \" + \n    (!results ? messages(\u0027pre\u0027) : messages(\u0027post\u0027)) + \"\\n\" + lastUpdated;\n  var status \u003d View.createText(statusText);\n  var footer \u003d CardService.newCardSection();\n  footer.addWidget(status);\n  return footer;\n}\n\nfunction getLastUpdated(message, prefix) {\n  var key \u003d (!prefix ? \"\" : prefix + \"\") + \".last-update\";\n  var lastUpdated \u003d getProperty(message, key);\n  return !!lastUpdated ? lastUpdated : \u0027\u0027;\n}\n\nfunction updateLastUpdated(message, prefix) {\n  var key \u003d (!prefix ? \"\" : prefix + \"\") + \".last-update\";\n  setProperty(message, key, (new Date().toISOString()));\n}\n\n/**\n * Retrieve the current sentiment for the email as\n * a javascript object.\n */\nfunction getResult(e, analysisType) {\n  // find result against message\n  var message \u003d getCurrentMessage(e);\n  var text \u003d getProperty(message, analysisType);\n  if (!!text) {\n    return JSON.parse(text);\n  }\n  return text;\n}\n\nfunction getProperty(message, key) {\n  var properties \u003d PropertiesService.getUserProperties();\n  return !properties ? null : properties.getProperty(\n    getPropertyKey(message, key));\n}\n\nfunction setProperty(message, key, value) {\n  if (value.length \u003e 9000) {\n    View.notify(\"The text is far too long to be stored using \" + value.length + \" characters.\\n\" + value);\n    return;\n  }\n  var properties \u003d PropertiesService.getUserProperties();\n  if (!!properties) {\n    properties.setProperty(\n      getPropertyKey(message, key), value);\n    return true;\n  } \n  return false;\n}\n\nfunction getPropertyKey(message, key) {\n  return message.getId() + \u0027/\u0027 + key;\n}\n\nfunction extractText(message) {\n  return !message ? \u0027\u0027 : message.getPlainBody();\n}\n\nfunction extractTitle(message) {\n  return !message ? \u0027\u0027 : message.getSubject();\n}\n\nfunction getMessage(analysisType, key) {\n  return !analysisType ? messages(key) : \n      messages(analysisType + \u0027.\u0027 + key);\n}\n\n/**\n * Apply a label to the current message thread to help identify\n * which threads have been analysed using some particular method.\n *\n * @param {Message} message The email to be labelled.\n */\nfunction applyLabel(message, analysisType) {\n  var thread \u003d message.getThread();\n  if (thread) {\n    var text \u003d getMessage(analysisType, \u0027label\u0027);\n    var found \u003d false;\n    var labels \u003d thread.getLabels();\n    for (var i in labels) {\n      if (labels[i].getName() \u003d\u003d\u003d text) {\n        found \u003d true;\n      }\n    }\n    if (!found) {\n      var label \u003d GmailApp.getUserLabelByName(text);\n      if (!label) {\n        label \u003d GmailApp.createLabel(text);\n      }\n      message.getThread().addLabel(label);\n    }\n  }\n}\n\n/**\n * Retrieves the current message given an action event object.\n * @param {Event} event An action event object\n * @return {Message}\n */\nfunction getCurrentMessage(event) {\n  var accessToken \u003d event.messageMetadata.accessToken;\n  var messageId \u003d event.messageMetadata.messageId;\n  // Activate temporary Gmail add-on scopes.\n  GmailApp.setCurrentMessageAccessToken(accessToken);\n  var message \u003d GmailApp.getMessageById(messageId);\n  return message;\n}\n\n"
        },
        {
            "id": "85d96300-57fc-46fa-bf7a-2ae054345bda",
            "name": "appsscript",
            "type": "json",
            "source": "{\n  \"timeZone\": \"Europe/Dublin\",\n  \"dependencies\": {\n  },\n  \"oauthScopes\": [\"https://www.googleapis.com/auth/gmail.addons.execute\", \"https://www.googleapis.com/auth/gmail.addons.current.message.metadata\", \"https://www.googleapis.com/auth/gmail.modify\", \"https://www.googleapis.com/auth/gmail.addons.current.message.readonly\", \"https://www.googleapis.com/auth/script.external_request\", \"https://www.googleapis.com/auth/script.locale\"],\n  \"gmail\": {\n    \"name\": \"Emoto\",\n    \"logoUrl\": \"http://codejago.com/emoto/assets/ic_sentiment_satisfied_black_48dp.png\",\n    \"contextualTriggers\": [{\n      \"unconditional\": {\n      },\n      \"onTriggerFunction\": \"buildAddOn\"\n    }],\n    \"primaryColor\": \"#4285F4\",\n    \"secondaryColor\": \"#4285F4\",\n    \"openLinkUrlPrefixes\": [\"https://mail.google.com/\"]\n  }\n}"
        },
        {
            "id": "485349e8-e453-440e-90c7-80e18f483fc0",
            "name": "messages",
            "type": "server_js",
            "source": "/**\n * i18n\n */\n\nfunction messages(key) {\n  var code \u003d getLanguage();\n  if (!!code \u0026\u0026 i18n[code]) {\n    return i18n[code][key];\n  }\n  return i18n[\u0027en\u0027][key];\n}\n\nfunction getLanguage() {\n  return Session.getActiveUserLocale();\n}\n\n// translations\nvar i18n \u003d {\n  \"en\": {\n    \"title\": \"Emotional Analyser\",\n    \"subtitle\": \"Analyse the emotion in your inbox.\",\n    \"subtext\": \"\u003cp\u003eHow sad or happy, positive or negative, are your emails? Analyse email using AI techniques such as sentiment analysis to rate the feelings ggenerated by the email content among others.\u003c/p\u003e\" + \n        \"\u003cp\u003eSummarize the email content.\u003c/p\u003e\" +\n        \"\u003cp\u003eGenerate suggested hashtags based on the content of the email and even detect the language used.\u003c/p\u003e\" + \n        \"\u003cp\u003eDiscover which things are being discussed in the email and the emotions associated with those things.\u003c/p\u003e\" + \n        \"\u003cp\u003eClassify the types of information in the email content, for instance does the email contain News, Games information, etc.\u003c/p\u003e\",\n    \"action\": \"[ Analyse ]\",\n    \"results\": \"Results\",\n    \"entity\": \"Entity\",\n    \"pre\": \"Awaiting analysis\",\n    \"post\": \"Analysed\",\n    \"status\": \"Status\",\n    \"tbd\": \"\u003cAnalysis to be done...\u003e\",\n    \"emptydataset\" : \"Nothing could be discovered within this email content for this particular type of analysis, for instance a summary requires a sufficient amount of data, and entity analysis requires certain concepts to be defined within the email content.\",\n    \"analysisFailed\": \"Failed to analyse the content of the message\",\n    \"responseTooLarge\": \"The response size exceeds the capacity of the system.\",\n    \"sentiment.title\": \"Sentiment Analysis\",\n    \"sentiment.subtitle\": \"Score the email\u0027s emotional sentiment.\",\n    \"sentiment.label\": \"Sentiment\",\n    \"sentiment.subtext\": \"Sentiment of a document in terms of polarity (positive or negative) and subjectivity (subjective or objective).\",\n    \"label.sentiment.polarity\": \"Polarity: \",\n    \"label.sentiment.subjectivity\": \"Subjectivity: \",\n    \"label.sentiment.confidence\": \"Score: \",\n    \"summary.title\": \"Summary\",\n    \"summary.subtitle\": \"Summarize the email content.\",\n    \"summary.label\": \"Summary\",\n    \"summary.subtext\": \"Summarizes an article into a few key sentences.\",\n    \"entity.title\": \"Entity Extraction\",\n    \"entity.subtitle\": \"Discover people, places, etc.\",\n    \"entity.label\": \"Entities\",\n    \"entity.subtext\": \"Entity Extraction looks at the structural patterns in a document to find and extract entities.\",\n    \"hashtags.title\": \"Hashtag Suggestions\",\n    \"hashtags.subtitle\": \"Generate a list of hashtags.\",\n    \"hashtags.label\": \"Hashtags\",\n    \"hashtags.subtext\": \"Generate a list of hashtags that will help you associate content with similar information on social media platforms.\",\n    \"languageDetection.title\": \"Language Detection\",\n    \"languageDetection.subtitle\": \"Determine the language of the email.\",\n    \"languageDetection.label\": \"Language Detection\",\n    \"languageDetection.subtext\": \"Detect the language of any text or URL swiftly and accurately, and returns it as an ISO 639-1 language code.\",\n    \"classification.title\": \"Classification\",\n    \"classification.subtitle\": \"Discover types of information.\",\n    \"classification.label\": \"Classification\",\n    \"classification.subtext\": \"Determine the type of information contained within the email if it can be classified.\",\n    \"entitySentiment.title\": \"Entity Level Sentiment\",\n    \"entitySentiment.subtitle\": \"Sentiment for entities in the email.\",\n    \"entitySentiment.label\": \"Entity Level Sentiment\",\n    \"entitySentiment.subtext\": \"The Entity-level Sentiment Analysis (ELSA) endpoint provides the sentiment associated with entity mentioned in a document.\"\n  }\n}\n"
        },
        {
            "id": "c109d874-7b80-49ed-a324-854dfe2bc241",
            "name": "Constants",
            "type": "server_js",
            "source": "/**\n * Constants\n */\n\n// Maximum chars to be stored in a property\nvar MAX \u003d 9000;\n\nfunction AnalysisTypeService () {\n  this.SENTIMENT \u003d \"sentiment\";\n  this.SUMMARY \u003d \"summary\";\n  this.ENTITY \u003d \"entity\";\n  this.HASHTAGS \u003d \"hashtags\";\n  this.LANG_DETECT \u003d \"languageDetection\";\n  this.CLASS \u003d \"classification\";\n  this.ENTITY_SENTIMENT \u003d \"entitySentiment\";\n  this.isAnalysisType \u003d function(analysisType) {\n    if (!analysisType) {\n      debug_log(\"analysisType not provided\");\n      return false;\n    }\n    for (var key in AnalysisType) {\n      if (AnalysisType[key] \u003d\u003d\u003d analysisType) {\n        return true;\n      }\n    }\n    return false;\n  };\n};\n\nvar Config \u003d {\n  AYLIEN_KEY: \"97d6013e54853be7bea03f99506f6194\",\n  AYLIEN_APP_ID: \"3af81c77\",\n};\n\nConfig[AnalysisType.SENTIMENT] \u003d {\n  CALLBACK: \"analyseSentiment\"\n};\nConfig[AnalysisType.SUMMARY] \u003d {\n  CALLBACK: \"analyseSummary\"\n};\nConfig[AnalysisType.ENTITY] \u003d {\n  CALLBACK: \"analyseEntity\"\n};\nConfig[AnalysisType.HASHTAGS] \u003d {\n  CALLBACK: \"analyseHashtags\"\n};\nConfig[AnalysisType.LANG_DETECT] \u003d {\n  CALLBACK: \"analyseLanguageDetection\"\n};\nConfig[AnalysisType.CLASS] \u003d {\n  CALLBACK: \"analyseClassification\"\n};\nConfig[AnalysisType.ENTITY_SENTIMENT] \u003d {\n  CALLBACK: \"analyseEntitySentiment\"\n};"
        },
        {
            "id": "c88c1164-2e5c-46e8-b766-1ce25e029254",
            "name": "Sentiment",
            "type": "server_js",
            "source": "/**\n * https://docs.aylien.com/textapi/endpoints/#sentiment-analysis\n */\nfunction SentimentService () {\n  \n  this.analyse \u003d function(text, title) {\n    var data \u003d {\n      \u0027text\u0027: text,\n      \u0027mode\u0027: \u0027tweet\u0027\n    };\n    return Aylien.invoke(Aylien.Operations.SENTIMENT, data, this.parseResponse);\n  };\n  \n  this.parseResponse \u003d function(response) {\n    var result \u003d {\n      status: 0,\n      error: null,\n      polarity: null,\n      polarity_confidence: null,\n      subjectivity: null,\n      subjectivity_confidence: null\n    };\n    if (response.getResponseCode() !\u003d 200) {\n      result.status \u003d 1;\n      result.error \u003d messages(\u0027analysisFailed\u0027);\n    } else {\n      var json \u003d JSON.parse(response.getContentText());\n      result.polarity \u003d json.polarity;\n      result.polarity_confidence \u003d json.polarity_confidence;\n      result.subjectivity \u003d json.subjectivity;\n      result.subjectivity_confidence \u003d json.subjectivity_confidence;\n    }\n    return result;\n  }\n};\ndebug_log(\"Sentiment service loaded\");\n  "
        },
        {
            "id": "4271eeea-524e-496e-b987-63a294b05fd5",
            "name": "Util",
            "type": "server_js",
            "source": "/**\n * Random utilities\n */\n\n    \nfunction limit(json, max) {\n  if (!json || !max) {\n    return json;\n  }\n  var text \u003d JSON.stringify(json);\n  if (!text || text.length \u003c max) {\n    return json;\n  }\n  var smaller \u003d {};\n  for (var key in json) {\n    var element \u003d json[key];\n    var string \u003d JSON.stringify(element);\n    var len \u003d JSON.stringify(smaller).length;\n    if (len + string.length \u003c max) {\n      smaller[key] \u003d element;\n    } else {\n      debug_log(\"Exceeded \" + max + \", removed \" + key);\n    }\n  }\n  return smaller;\n}\n\nfunction safe_access(object, property) {\n  if (!!object \u0026\u0026 typeof object \u003d\u003d \u0027object\u0027 \u0026\u0026 !!object[property]) {\n    return object[property];\n  }\n  return null;\n}\n\nfunction url_decode(string) {\n  if (!!string \u0026\u0026 typeof string \u003d\u003d \u0027string\u0027) {\n    return decodeURIComponent(string);\n  }\n  return \u0027\u0027;\n}\n\nfunction isValue(value) {\n  return typeof value \u003d\u003d \"string\" ||\n    typeof value \u003d\u003d \"number\" ||\n    typeof value \u003d\u003d \"boolean\";\n}\n\nfunction isString(value) {\n  return typeof value \u003d\u003d \"string\";\n}\n\nfunction isObject(value) {\n  return typeof value \u003d\u003d \"object\";\n}\n\nfunction hasValue(value) {\n  return !isString(value) || value.length \u003e 0;\n}\n\nfunction debug_log(value) {\n  Logger.log(\u0027********** DEBUG LOG ************\u0027);\n  if (!!value \u0026\u0026 Array.isArray(value)) {\n    for (var key in value) {\n      Logger.log(value[key]);\n    }\n  } else {\n    Logger.log(value);\n  }\n  Logger.log(\u0027********** LOGGED ************\u0027);\n}\n\nfunction object_tostring(object) {\n  if (!object || !(typeof object \u003d\u003d \u0027object\u0027)) {\n    return \u0027not an object\u0027;\n  }\n  var items \u003d [];\n  for (var key in object) {\n    items.push(key + \":\" + object[key]);\n  }\n  return \"\" + items;\n}\n\nfunction toLabel(string) {\n  var caps \u003d capitalise(string);\n  return !caps ? caps : caps + \u0027: \u0027;\n}\n\nfunction capitalise(string) {\n  // 0 long or not string then don\u0027t bother\n  if (!!string \u0026\u0026 typeof string \u003d\u003d \u0027string\u0027 \u0026\u0026 string.length \u003e 0) {\n    var words \u003d string.replace(\u0027_\u0027, \u0027 \u0027).split(\u0027 \u0027);\n    var text \u003d \u0027\u0027;\n    for (key in words) {\n      text +\u003d words[key];\n      text +\u003d \u0027 \u0027;\n    }\n    text \u003d text.trim();\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n  return \u0027\u0027;\n}\n"
        },
        {
            "id": "08a07e36-e790-4a18-92a1-da6b2426a7cc",
            "name": "Summary",
            "type": "server_js",
            "source": "/**\n * https://docs.aylien.com/textapi/endpoints/#summarization\n */\nfunction SummaryService () {\n  \n  this.analyse \u003d function(text, title) {\n    var data \u003d {\n      \u0027title\u0027: title,\n      \u0027text\u0027: text,\n      \u0027sentences_number\u0027: \u00272\u0027\n    };\n    return Aylien.invoke(Aylien.Operations.SUMMARIZE, data, this.parseResponse);\n  };\n  \n  this.parseResponse \u003d function(response) {\n    var result \u003d {\n      status: 0,\n      error: null,\n      content: null\n    };\n    if (response.getResponseCode() !\u003d 200) {\n      result.status \u003d 1;\n      result.error \u003d messages(\u0027analysisFailed\u0027);\n    } else {\n      var json \u003d JSON.parse(response.getContentText());\n      var sentences \u003d safe_access(json, \u0027sentences\u0027);\n      var text \u003d \u0027\u0027;\n      if (!!sentences \u0026\u0026 typeof sentences \u003d\u003d \u0027object\u0027) {\n        for (i in sentences) {\n          text +\u003d url_decode(sentences[i]);\n          text +\u003d \u0027 \u0027;\n        }\n      }\n      result.content \u003d !text ? text : text.substring(0, MAX);\n    }\n    return result;\n  }\n  \n};\ndebug_log(\"Summary service loaded\");\n"
        },
        {
            "id": "7529f7e3-9b18-42ff-8dbc-1e61cdcef531",
            "name": "Aylien",
            "type": "server_js",
            "source": "function AylienService () {\n  \n  this.Operations \u003d {\n    SUMMARIZE: \"https://api.aylien.com/api/v1/summarize\",\n    SENTIMENT: \"https://api.aylien.com/api/v1/sentiment\",\n    ENTITY: \"https://api.aylien.com/api/v1/entities\",\n    HASHTAGS: \"https://api.aylien.com/api/v1/hashtags\",\n    LANG_DETECT: \"https://api.aylien.com/api/v1/language\",\n    CLASS: \"https://api.aylien.com/api/v1/classify\",\n    ENTITY_SENTIMENT: \"https://api.aylien.com/api/v1/elsa\"\n  },\n  \n  this.invoke \u003d function(operation, data, callback) {\n    var headers \u003d {\n      \"Accept\": \"application/json\",\n      \"X-AYLIEN-TextAPI-Application-Key\": Config.AYLIEN_KEY,\n      \"X-AYLIEN-TextAPI-Application-ID\": Config.AYLIEN_APP_ID\n    };\n    var options \u003d {\n      \u0027method\u0027 : \u0027post\u0027,\n      \u0027contentType\u0027: \u0027application/x-www-form-urlencoded\u0027,\n      \u0027headers\u0027: headers,\n      \u0027muteHttpExceptions\u0027: true,\n      \u0027payload\u0027 : data\n    };\n    var response \u003d UrlFetchApp.fetch(operation, options);\n    debug_log(response);\n    return callback(response);\n  }\n}\n"
        },
        {
            "id": "2492faf4-04ab-4e13-bbb1-bacfab8271ba",
            "name": "Entity",
            "type": "server_js",
            "source": "/**\n * https://docs.aylien.com/textapi/endpoints/#entity-extraction\n */\nfunction EntityService () {\n  \n  var self \u003d this;\n  \n  self.analyse \u003d function(text, title) {\n    var data \u003d {\n      \u0027text\u0027: text\n    };\n    var response \u003d Aylien.invoke(Aylien.Operations.ENTITY, data, self.parseResponse);\n    debug_log(response.content);\n    return response;\n  };\n  \n  self.parseResponse \u003d function(response) {\n    var result \u003d {\n      status: 0,\n      error: null,\n      language: null,\n      content: null\n    };\n    if (response.getResponseCode() !\u003d 200) {\n      result.status \u003d 1;\n      result.error \u003d messages(\u0027analysisFailed\u0027);\n    } else {\n      var json \u003d JSON.parse(response.getContentText());\n      var entities \u003d safe_access(json, \u0027entities\u0027);\n      result.content \u003d limit(entities, MAX);\n      result.language \u003d safe_access(json, \u0027language\u0027);\n    }\n    return result;\n  };\n  \n};\ndebug_log(\"Entity service loaded\");\n"
        },
        {
            "id": "d55b9de6-d54c-4110-bd97-1cd182382d3c",
            "name": "View",
            "type": "server_js",
            "source": "/**\n * Gui related\n */\nvar View \u003d {\n  \n  /**\n   * Notify\n   */\n  notify: function(text) {\n    return CardService.newActionResponseBuilder()\n      .setNotification(CardService.newNotification().setText(text))\n      .build();\n  },\n  \n  /**\n   * Read-only text field\n   */\n  createText: function(text, label) {\n    var prefix \u003d !label ? \"\" : \"\" + label;\n    var string \u003d prefix + (!text ? \"\" : text);\n    return CardService.newTextParagraph()\n        .setText(string);\n  },\n  \n  /**\n   * A helper function for building dropdown widgets\n   * https://cloud.google.com/blog/products/application-development/building-gmail-add-on-with-trello?m\u003d0\n   */\n  buildDropdownWidget: function(key, title, items, selected) {\n    var widget \u003d CardService.newSelectionInput()\n      .setType(CardService.SelectionInputType.DROPDOWN)\n      .setTitle(title)\n      .setFieldName(key)\n    for(var i \u003d 0; i \u003c items.length; i++) {\n      var itemSelected \u003d selected \u003d\u003d\u003d items[i].value\n      widget.addItem(items[i].text, items[i].value, itemSelected)\n    }\n    return widget\n  },\n  \n  /**\n   * Generic body - just print out the data\n   */\n  createBodyWidget: function(message, data, analysisType) {\n    var action \u003d CardService.newAction()\n      .setFunctionName(Config[analysisType].CALLBACK);\n    var button \u003d CardService.newTextButton()\n      .setText(messages(\u0027action\u0027))\n      .setOnClickAction(action);\n    var stack \u003d [];\n    var section \u003d CardService.newCardSection();\n    section.addWidget(button);\n    stack.push(section);\n    var content \u003d safe_access(data, \u0027content\u0027);\n    if (!!content \u0026\u0026 typeof content !\u003d \u0027object\u0027) {\n      stack.push(View.createSectionFromValue(content));\n    } else if (!!content \u0026\u0026 Array.isArray(content)) { // json, array\n      stack.push(View.createSectionFromArray(content));\n    } else if (!!content \u0026\u0026 typeof content \u003d\u003d \u0027object\u0027) { // json, array\n      stack.push(View.createSectionFromObject(content));\n    }\n    return stack;\n  },\n  \n  createSectionFromValue: function(value) {\n    debug_log(\u0027createSectionFromValue \u003d \u0027 + value);\n    if (isString(value) \u0026\u0026 !value) {\n      return View.createSectionForEmptyDataSet();\n    }\n    return CardService.newCardSection()\n        .addWidget(View.createText(value));\n  },\n  \n  createSectionFromArray: function(list) {\n    debug_log(\u0027createSectionFromArray \u003d \u0027 + list);\n    if (list.length \u003d\u003d 0) {\n      return View.createSectionForEmptyDataSet();\n    }\n    var section;\n    for (var item in list) {\n      if (!list[item]) {\n        continue;\n      }\n      if (!section) {\n        section \u003d CardService.newCardSection();\n      }\n      if (isValue(list[item])) { // string\n        section.addWidget(View.createText(list[item]));\n      } else { // object\n        var texts \u003d View.createTextItemsFromObject(list[item]);\n        for (var text in texts) {\n          section.addWidget(texts[text]);\n        }\n      }\n    }\n    return section;\n  },\n  \n  createTextItemsFromObject: function(object) {\n    debug_log(\u0027createTextItemsFromObject \u003d \u0027 + object);\n    var items \u003d [];\n    if (Object.keys(object).length \u003d\u003d 0) {\n      return items;\n    }\n    for (var key in object) {\n      if (!object[key]) {\n        continue;\n      }\n      if (isValue(object[key]) \u0026\u0026 hasValue(object[key])) {\n        items.push(View.createText(object[key], toLabel(key)));\n      } else if (Array.isArray(object[key])) {\n        items \u003d items.concat(View.createTextItemsFromArray(object[key]));\n      } else if (isObject(object[key])) {\n        items.push(View.createText(Style.subSectionHeader(capitalise(key))));\n        items \u003d items.concat(View.createTextItemsFromObject(object[key]));\n      }\n    }\n    return items;\n  },\n  \n  createTextItemsFromArray: function(object) {\n    debug_log(\u0027createTextItemsFromArray \u003d \u0027 + object);\n    var items \u003d [];\n    if (Object.keys(object).length \u003d\u003d 0) {\n      return items;\n    }\n    for (var key in object) {\n      if (!object[key]) {\n        continue;\n      }\n      if (isValue(object[key]) \u0026\u0026 hasValue(object[key])) {\n        items.push(View.createText(object[key]));\n      } else if (isObject(object[key])) {\n        items \u003d items.concat(View.createTextItemsFromObject(object[key]));\n      }\n    }\n    return items;\n  },\n  \n  createSectionFromObject: function(object) {\n    debug_log(\u0027createSectionFromObject \u003d \u0027 + object);\n    if (Object.keys(object).length \u003d\u003d 0) {\n      return View.createSectionForEmptyDataSet();\n    }\n    var section;\n    for (var key in object) {\n      if (!object[key]) {\n        continue;\n      }\n      if (!section) {\n        section \u003d CardService.newCardSection();\n      }\n      // subtitle\n      section.addWidget(View.createText(capitalise(key), \n                                        Style.subSectionHeader(toLabel(messages(\"entity\")))));\n      // elements\n      if (isValue(object[key])) { // string\n        section.addWidget(View.createText(object[key]));\n      } else if (Array.isArray(object[key])) { // has children\n        var texts \u003d View.createTextItemsFromArray(object[key]);\n        for (var text in texts) {\n          section.addWidget(texts[text]);\n        }\n      } else { // has children\n        var texts \u003d View.createTextItemsFromObject(object[key]);\n        for (var text in texts) {\n          section.addWidget(texts[text]);\n        }\n      }\n    }\n    return section;\n  },\n  \n  createSectionForEmptyDataSet: function() {\n    return CardService.newCardSection()\n        .addWidget(View.createText(messages(\u0027emptydataset\u0027)));\n  }\n};\n\nView.CreateCardCallbacks \u003d {};\nView.CreateCardCallbacks[AnalysisType.SUMMARY] \u003d this[\u0027createSummaryCard\u0027];\nView.CreateCardCallbacks[AnalysisType.SENTIMENT] \u003d this[\u0027createSentimentCard\u0027];\nView.CreateCardCallbacks[AnalysisType.ENTITY] \u003d this[\u0027createEntityCard\u0027];\nView.CreateCardCallbacks[AnalysisType.HASHTAGS] \u003d this[\u0027createHashtagsCard\u0027];\nView.CreateCardCallbacks[AnalysisType.LANG_DETECT] \u003d this[\u0027createLanguageDetectionCard\u0027];\nView.CreateCardCallbacks[AnalysisType.CLASS] \u003d this[\u0027createClassificationCard\u0027];\nView.CreateCardCallbacks[AnalysisType.ENTITY_SENTIMENT] \u003d this[\u0027createEntitySentimentCard\u0027];\n"
        },
        {
            "id": "def58ac6-8081-4425-8ae9-9e9ca8f91e09",
            "name": "ServiceLocator",
            "type": "server_js",
            "source": "function ServiceLocatorService () {\n  \n  this.Services \u003d {\n  };\n  \n  this.bind \u003d function(analysisType, service) {\n    if (!analysisType) {\n      debug_log(\"Service name not provided\");\n    }\n    if (!service) {\n      debug_log(\"Service not provided\");\n    }\n    this.Services[analysisType] \u003d service;\n    debug_log(\"Service bound \" + analysisType + \"\u003d\u003e\" + this.Services[analysisType]);\n  };\n  \n  this.analyse \u003d function(analysisType, text, title) {\n    if (!analysisType) {\n      debug_log(\"Service name not provided\");\n      return null;\n    }\n    if (!AnalysisType.isAnalysisType(analysisType)) {\n      debug_log(\"AnalysisType not found [\" + analysisType + \"]\");\n      return null;\n    }\n    if (!this.Services[analysisType]) {\n      debug_log(\"Service not found [\" + analysisType + \"]\");\n      debug_log(\"ServiceLocators are [\" + object_tostring(this.Services) + \"]\");\n      return null;\n    }\n    return this.Services[analysisType].analyse(text, title);\n  };\n};"
        },
        {
            "id": "80fed869-cb3e-4b14-adf4-46f93e071ec3",
            "name": "Style",
            "type": "server_js",
            "source": "function StyleService () {\n  \n  this.sectionHeader \u003d function(text) {\n    return !hasValue(text) ? text : \n      \"\u003cfont color\u003d\\\"#1257e0\\\"\u003e\u003cb\u003e\" + text + \"\u003c/b\u003e\u003c/font\u003e\";\n  };\n  \n  this.subSectionHeader \u003d function(text) {\n    return !hasValue(text) ? text : \n      \"\u003cb\u003e\" + text + \"\u003c/b\u003e\";\n  };\n  \n  /**\n   * @return an HTML embedded icon for the application.\n   */\n  this.getSentimentSatisifiedIcon \u003d function() {\n    return \n      \u0027\u003csvg xmlns\u003d\"http://www.w3.org/2000/svg\" width\u003d\"24\" height\u003d\"24\" viewBox\u003d\"0 0 24 24\"\u003e\u0027 +\n        \u0027\u003cpath fill\u003d\"none\" d\u003d\"M0 0h24v24H0V0z\" /\u003e\u0027 +\n        \u0027\u003ccircle cx\u003d\"15.5\" cy\u003d\"9.5\" r\u003d\"1.5\" /\u003e\u0027 +\n        \u0027\u003ccircle cx\u003d\"8.5\" cy\u003d\"9.5\" r\u003d\"1.5\" /\u003e\u0027 +\n        \u0027\u003cpath d\u003d\"M12 16c-1.48 0-2.75-.81-3.45-2H6.88c.8 2.05 2.79 3.5 5.12 3.5s4.32-1.45 5.12-3.5h-1.67c-.7 1.19-1.97 2-3.45 2zm-.01-14C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\" /\u003e\u0027 +\n      \u0027\u003c/svg\u003e\u0027;\n  };\n  \n};\n"
        },
        {
            "id": "ba12fd48-222f-4ff3-8865-bd2c3feab06c",
            "name": "Hashtags",
            "type": "server_js",
            "source": "/**\n * https://docs.aylien.com/textapi/endpoints/#hashtags\n */\nfunction HashtagsService () { \n  \n  this.analyse \u003d function(text, title) {\n    var data \u003d {\n      \u0027text\u0027: text\n    };\n    var response \u003d Aylien.invoke(Aylien.Operations.HASHTAGS, data, this.parseResponse);\n    debug_log(response.content);\n    return response;\n  };\n  \n  this.parseResponse \u003d function(response) {\n    var result \u003d {\n      status: 0,\n      error: null,\n      language: null,\n      content: null\n    };\n    if (response.getResponseCode() !\u003d 200) {\n      result.status \u003d 1;\n      result.error \u003d messages(\u0027analysisFailed\u0027);\n    } else {\n      var json \u003d JSON.parse(response.getContentText());\n      result.content \u003d limit(safe_access(json, \u0027hashtags\u0027), MAX);\n      result.language \u003d safe_access(json, \u0027language\u0027);\n    }\n    return result;\n  }\n  \n};\ndebug_log(\"Hashtags service loaded\");\n"
        },
        {
            "id": "5b7fdd0d-e3eb-47d1-a876-8db01840bb8a",
            "name": "Language",
            "type": "server_js",
            "source": "/**\n * https://docs.aylien.com/textapi/endpoints/#language-detection\n */\nfunction LanguageDetectionService () { \n  \n  this.analyse \u003d function(text, title) {\n    var data \u003d {\n      \u0027text\u0027: text\n    };\n    var response \u003d Aylien.invoke(Aylien.Operations.LANG_DETECT, data, this.parseResponse);\n    return response;\n  };\n  \n  this.parseResponse \u003d function(response) {\n    var result \u003d {\n      status: 0,\n      error: null,\n      language: null,\n      confidence: null\n    };\n    if (response.getResponseCode() !\u003d 200) {\n      result.status \u003d 1;\n      result.error \u003d messages(\u0027analysisFailed\u0027);\n    } else {\n      var json \u003d JSON.parse(response.getContentText());\n      var entity \u003d {\n        confidence: safe_access(json, \u0027confidence\u0027),\n        language: safe_access(json, \u0027lang\u0027)\n      };\n      result.content \u003d entity;\n      result.language \u003d safe_access(json, \u0027lang\u0027);\n    }\n    return result;\n  }\n  \n};\ndebug_log(\"LanguageDetection service loaded\");\n"
        },
        {
            "id": "340a5821-9abe-4d9b-a03c-dd37fb8df272",
            "name": "Classification",
            "type": "server_js",
            "source": "/**\n * https://docs.aylien.com/textapi/endpoints/#classification\n */\nfunction ClassificationService () { \n  \n  this.analyse \u003d function(text, title) {\n    var data \u003d {\n      \u0027text\u0027: text\n    };\n    var response \u003d Aylien.invoke(Aylien.Operations.CLASS, data, this.parseResponse);\n    return response;\n  };\n  \n  this.parseResponse \u003d function(response) {\n    var result \u003d {\n      status: 0,\n      error: null,\n      language: null,\n      confidence: null\n    };\n    if (response.getResponseCode() !\u003d 200) {\n      result.status \u003d 1;\n      result.error \u003d messages(\u0027analysisFailed\u0027);\n    } else {\n      debug_log(response.getContentText());\n      var json \u003d JSON.parse(response.getContentText());\n      var entity \u003d {\n        categories : safe_access(json, \u0027categories\u0027)\n      };\n      result.content \u003d (!entity.categories || entity.categories.length \u003d\u003d 0 ? {} : limit(entity, MAX));\n      result.language \u003d safe_access(json, \u0027lang\u0027);\n    }\n    return result;\n  }\n  \n};\ndebug_log(\"Classification service loaded\");\n"
        },
        {
            "id": "a37dc172-9753-470c-97a6-45cfe6787f27",
            "name": "EntityLevelSentiment",
            "type": "server_js",
            "source": "/**\n * https://docs.aylien.com/textapi/endpoints/#entity-level-sentiment-analysis\n */\nfunction EntitySentimentService () {\n  \n  this.analyse \u003d function(text, title) {\n    var data \u003d {\n      \u0027text\u0027: text,\n      \u0027mode\u0027: \u0027tweet\u0027\n    };\n    return Aylien.invoke(Aylien.Operations.ENTITY_SENTIMENT, data, this.parseResponse);\n  };\n  \n  this.parseResponse \u003d function(response) {\n    var result \u003d {\n      status: 0,\n      error: null,\n      language: null,\n      content: null\n    };\n    if (response.getResponseCode() !\u003d 200) {\n      result.status \u003d 1;\n      result.error \u003d messages(\u0027analysisFailed\u0027);\n    } else {\n      var json \u003d JSON.parse(response.getContentText());\n      var entities \u003d safe_access(json, \u0027entities\u0027);\n      var summary \u003d {};\n      for (var key in entities) {\n        var entity \u003d entities[key];\n        var text \u003d safe_access(entity.mentions[0], \u0027text\u0027);\n        var sentiment \u003d entity.overall_sentiment;\n        sentiment.type \u003d entity.type;\n        if (!summary[text]) {\n          summary[text] \u003d [sentiment];\n        } else {\n          summary[text].push(sentiment);\n        }\n      }\n      result.content \u003d limit(summary, MAX);\n      result.language \u003d safe_access(json, \u0027language\u0027);\n    }\n    return result;\n  }\n};\ndebug_log(\"EntitySentiment service loaded\");\n  "
        },
        {
            "id": "1973852b-200e-4603-b52d-7440379af283",
            "name": "Assets",
            "type": "server_js",
            "source": "/**\n * Co-locate the assets used by the app.\n */\n\nvar Assets \u003d {\n  ICON: \u0027http://codejago.com/emoto/assets/ic_sentiment_satisfied_black_48dp.png\u0027,\n  ICON_SENTIMENT: \u0027http://codejago.com/emoto/assets/ic_sentiment_very_satisfied_black_48dp.png\u0027,\n  ICON_HASHTAGS: \u0027http://codejago.com/emoto/assets/icons8-hashtag-52.png\u0027,\n  ICON_CLASSIFICATION: \u0027http://codejago.com/emoto/assets/class_black_54x54.png\u0027,\n  ICON_LANGUAGE: \u0027http://codejago.com/emoto/assets/language_black_54x54.png\u0027,\n  ICON_SUMMARY: \u0027http://codejago.com/emoto/assets/ic_unfold_less_black_48dp.png\u0027,\n  ICON_ENTITY: \u0027http://codejago.com/emoto/assets/ic_functions_black_48dp.png\u0027,\n  getIcon: function(analysisType) {\n    return (!Assets.Icons[analysisType] ? Assets.ICON : Assets.Icons[analysisType]);\n  }\n};\nAssets.Icons \u003d {};\nAssets.Icons[AnalysisType.SENTIMENT] \u003d Assets.ICON_SENTIMENT;\nAssets.Icons[AnalysisType.HASHTAGS] \u003d Assets.ICON_HASHTAGS;\nAssets.Icons[AnalysisType.CLASS] \u003d Assets.ICON_CLASSIFICATION;\nAssets.Icons[AnalysisType.LANG_DETECT] \u003d Assets.ICON_LANGUAGE;\nAssets.Icons[AnalysisType.SUMMARY] \u003d Assets.ICON_SUMMARY;\nAssets.Icons[AnalysisType.ENTITY] \u003d Assets.ICON_ENTITY;\nAssets.Icons[AnalysisType.ENTITY_SENTIMENT] \u003d Assets.ICON_ENTITY;\n"
        }
    ]
}